// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package queries

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Account:           newAccount(db, opts...),
		Availability:      newAvailability(db, opts...),
		Classroom:         newClassroom(db, opts...),
		Config:            newConfig(db, opts...),
		Log:               newLog(db, opts...),
		Request:           newRequest(db, opts...),
		Session:           newSession(db, opts...),
		Student:           newStudent(db, opts...),
		User:              newUser(db, opts...),
		VerificationToken: newVerificationToken(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account           account
	Availability      availability
	Classroom         classroom
	Config            config
	Log               log
	Request           request
	Session           session
	Student           student
	User              user
	VerificationToken verificationToken
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Account:           q.Account.clone(db),
		Availability:      q.Availability.clone(db),
		Classroom:         q.Classroom.clone(db),
		Config:            q.Config.clone(db),
		Log:               q.Log.clone(db),
		Request:           q.Request.clone(db),
		Session:           q.Session.clone(db),
		Student:           q.Student.clone(db),
		User:              q.User.clone(db),
		VerificationToken: q.VerificationToken.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Account:           q.Account.replaceDB(db),
		Availability:      q.Availability.replaceDB(db),
		Classroom:         q.Classroom.replaceDB(db),
		Config:            q.Config.replaceDB(db),
		Log:               q.Log.replaceDB(db),
		Request:           q.Request.replaceDB(db),
		Session:           q.Session.replaceDB(db),
		Student:           q.Student.replaceDB(db),
		User:              q.User.replaceDB(db),
		VerificationToken: q.VerificationToken.replaceDB(db),
	}
}

type queryCtx struct {
	Account           IAccountDo
	Availability      IAvailabilityDo
	Classroom         IClassroomDo
	Config            IConfigDo
	Log               ILogDo
	Request           IRequestDo
	Session           ISessionDo
	Student           IStudentDo
	User              IUserDo
	VerificationToken IVerificationTokenDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:           q.Account.WithContext(ctx),
		Availability:      q.Availability.WithContext(ctx),
		Classroom:         q.Classroom.WithContext(ctx),
		Config:            q.Config.WithContext(ctx),
		Log:               q.Log.WithContext(ctx),
		Request:           q.Request.WithContext(ctx),
		Session:           q.Session.WithContext(ctx),
		Student:           q.Student.WithContext(ctx),
		User:              q.User.WithContext(ctx),
		VerificationToken: q.VerificationToken.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
