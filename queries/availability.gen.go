// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package queries

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/laurel-public-schools/lps-api/model"
)

func newAvailability(db *gorm.DB, opts ...gen.DOOption) availability {
	_availability := availability{}

	_availability.availabilityDo.UseDB(db, opts...)
	_availability.availabilityDo.UseModel(&model.Availability{})

	tableName := _availability.availabilityDo.TableName()
	_availability.ALL = field.NewAsterisk(tableName)
	_availability.ID = field.NewString(tableName, "id")
	_availability.ClassroomID = field.NewString(tableName, "classroomId")
	_availability.Date = field.NewTime(tableName, "date")
	_availability.Available = field.NewBool(tableName, "available")
	_availability.TeacherID = field.NewString(tableName, "teacherId")

	_availability.fillFieldMap()

	return _availability
}

type availability struct {
	availabilityDo availabilityDo

	ALL         field.Asterisk
	ID          field.String
	ClassroomID field.String
	Date        field.Time
	Available   field.Bool
	TeacherID   field.String

	fieldMap map[string]field.Expr
}

func (a availability) Table(newTableName string) *availability {
	a.availabilityDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a availability) As(alias string) *availability {
	a.availabilityDo.DO = *(a.availabilityDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *availability) updateTableName(table string) *availability {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.ClassroomID = field.NewString(table, "classroomId")
	a.Date = field.NewTime(table, "date")
	a.Available = field.NewBool(table, "available")
	a.TeacherID = field.NewString(table, "teacherId")

	a.fillFieldMap()

	return a
}

func (a *availability) WithContext(ctx context.Context) IAvailabilityDo {
	return a.availabilityDo.WithContext(ctx)
}

func (a availability) TableName() string { return a.availabilityDo.TableName() }

func (a availability) Alias() string { return a.availabilityDo.Alias() }

func (a availability) Columns(cols ...field.Expr) gen.Columns {
	return a.availabilityDo.Columns(cols...)
}

func (a *availability) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *availability) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["classroomId"] = a.ClassroomID
	a.fieldMap["date"] = a.Date
	a.fieldMap["available"] = a.Available
	a.fieldMap["teacherId"] = a.TeacherID
}

func (a availability) clone(db *gorm.DB) availability {
	a.availabilityDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a availability) replaceDB(db *gorm.DB) availability {
	a.availabilityDo.ReplaceDB(db)
	return a
}

type availabilityDo struct{ gen.DO }

type IAvailabilityDo interface {
	gen.SubQuery
	Debug() IAvailabilityDo
	WithContext(ctx context.Context) IAvailabilityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAvailabilityDo
	WriteDB() IAvailabilityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAvailabilityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAvailabilityDo
	Not(conds ...gen.Condition) IAvailabilityDo
	Or(conds ...gen.Condition) IAvailabilityDo
	Select(conds ...field.Expr) IAvailabilityDo
	Where(conds ...gen.Condition) IAvailabilityDo
	Order(conds ...field.Expr) IAvailabilityDo
	Distinct(cols ...field.Expr) IAvailabilityDo
	Omit(cols ...field.Expr) IAvailabilityDo
	Join(table schema.Tabler, on ...field.Expr) IAvailabilityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAvailabilityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAvailabilityDo
	Group(cols ...field.Expr) IAvailabilityDo
	Having(conds ...gen.Condition) IAvailabilityDo
	Limit(limit int) IAvailabilityDo
	Offset(offset int) IAvailabilityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAvailabilityDo
	Unscoped() IAvailabilityDo
	Create(values ...*model.Availability) error
	CreateInBatches(values []*model.Availability, batchSize int) error
	Save(values ...*model.Availability) error
	First() (*model.Availability, error)
	Take() (*model.Availability, error)
	Last() (*model.Availability, error)
	Find() ([]*model.Availability, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Availability, err error)
	FindInBatches(result *[]*model.Availability, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Availability) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAvailabilityDo
	Assign(attrs ...field.AssignExpr) IAvailabilityDo
	Joins(fields ...field.RelationField) IAvailabilityDo
	Preload(fields ...field.RelationField) IAvailabilityDo
	FirstOrInit() (*model.Availability, error)
	FirstOrCreate() (*model.Availability, error)
	FindByPage(offset int, limit int) (result []*model.Availability, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAvailabilityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a availabilityDo) Debug() IAvailabilityDo {
	return a.withDO(a.DO.Debug())
}

func (a availabilityDo) WithContext(ctx context.Context) IAvailabilityDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a availabilityDo) ReadDB() IAvailabilityDo {
	return a.Clauses(dbresolver.Read)
}

func (a availabilityDo) WriteDB() IAvailabilityDo {
	return a.Clauses(dbresolver.Write)
}

func (a availabilityDo) Session(config *gorm.Session) IAvailabilityDo {
	return a.withDO(a.DO.Session(config))
}

func (a availabilityDo) Clauses(conds ...clause.Expression) IAvailabilityDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a availabilityDo) Returning(value interface{}, columns ...string) IAvailabilityDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a availabilityDo) Not(conds ...gen.Condition) IAvailabilityDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a availabilityDo) Or(conds ...gen.Condition) IAvailabilityDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a availabilityDo) Select(conds ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a availabilityDo) Where(conds ...gen.Condition) IAvailabilityDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a availabilityDo) Order(conds ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a availabilityDo) Distinct(cols ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a availabilityDo) Omit(cols ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a availabilityDo) Join(table schema.Tabler, on ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a availabilityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a availabilityDo) RightJoin(table schema.Tabler, on ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a availabilityDo) Group(cols ...field.Expr) IAvailabilityDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a availabilityDo) Having(conds ...gen.Condition) IAvailabilityDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a availabilityDo) Limit(limit int) IAvailabilityDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a availabilityDo) Offset(offset int) IAvailabilityDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a availabilityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAvailabilityDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a availabilityDo) Unscoped() IAvailabilityDo {
	return a.withDO(a.DO.Unscoped())
}

func (a availabilityDo) Create(values ...*model.Availability) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a availabilityDo) CreateInBatches(values []*model.Availability, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a availabilityDo) Save(values ...*model.Availability) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a availabilityDo) First() (*model.Availability, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Availability), nil
	}
}

func (a availabilityDo) Take() (*model.Availability, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Availability), nil
	}
}

func (a availabilityDo) Last() (*model.Availability, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Availability), nil
	}
}

func (a availabilityDo) Find() ([]*model.Availability, error) {
	result, err := a.DO.Find()
	return result.([]*model.Availability), err
}

func (a availabilityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Availability, err error) {
	buf := make([]*model.Availability, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a availabilityDo) FindInBatches(result *[]*model.Availability, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a availabilityDo) Attrs(attrs ...field.AssignExpr) IAvailabilityDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a availabilityDo) Assign(attrs ...field.AssignExpr) IAvailabilityDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a availabilityDo) Joins(fields ...field.RelationField) IAvailabilityDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a availabilityDo) Preload(fields ...field.RelationField) IAvailabilityDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a availabilityDo) FirstOrInit() (*model.Availability, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Availability), nil
	}
}

func (a availabilityDo) FirstOrCreate() (*model.Availability, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Availability), nil
	}
}

func (a availabilityDo) FindByPage(offset int, limit int) (result []*model.Availability, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a availabilityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a availabilityDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a availabilityDo) Delete(models ...*model.Availability) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *availabilityDo) withDO(do gen.Dao) *availabilityDo {
	a.DO = *do.(*gen.DO)
	return a
}
