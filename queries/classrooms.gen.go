// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package queries

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/laurel-public-schools/lps-api/model"
)

func newClassroom(db *gorm.DB, opts ...gen.DOOption) classroom {
	_classroom := classroom{}

	_classroom.classroomDo.UseDB(db, opts...)
	_classroom.classroomDo.UseModel(&model.Classroom{})

	tableName := _classroom.classroomDo.TableName()
	_classroom.ALL = field.NewAsterisk(tableName)
	_classroom.ID = field.NewString(tableName, "id")
	_classroom.RoomNumber = field.NewString(tableName, "roomNumber")
	_classroom.TeacherName = field.NewString(tableName, "teacherName")
	_classroom.TeacherID = field.NewString(tableName, "teacherId")
	_classroom.Comment = field.NewString(tableName, "comment")

	_classroom.fillFieldMap()

	return _classroom
}

type classroom struct {
	classroomDo classroomDo

	ALL         field.Asterisk
	ID          field.String
	RoomNumber  field.String
	TeacherName field.String
	TeacherID   field.String
	Comment     field.String

	fieldMap map[string]field.Expr
}

func (c classroom) Table(newTableName string) *classroom {
	c.classroomDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c classroom) As(alias string) *classroom {
	c.classroomDo.DO = *(c.classroomDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *classroom) updateTableName(table string) *classroom {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.RoomNumber = field.NewString(table, "roomNumber")
	c.TeacherName = field.NewString(table, "teacherName")
	c.TeacherID = field.NewString(table, "teacherId")
	c.Comment = field.NewString(table, "comment")

	c.fillFieldMap()

	return c
}

func (c *classroom) WithContext(ctx context.Context) IClassroomDo {
	return c.classroomDo.WithContext(ctx)
}

func (c classroom) TableName() string { return c.classroomDo.TableName() }

func (c classroom) Alias() string { return c.classroomDo.Alias() }

func (c classroom) Columns(cols ...field.Expr) gen.Columns { return c.classroomDo.Columns(cols...) }

func (c *classroom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *classroom) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["roomNumber"] = c.RoomNumber
	c.fieldMap["teacherName"] = c.TeacherName
	c.fieldMap["teacherId"] = c.TeacherID
	c.fieldMap["comment"] = c.Comment
}

func (c classroom) clone(db *gorm.DB) classroom {
	c.classroomDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c classroom) replaceDB(db *gorm.DB) classroom {
	c.classroomDo.ReplaceDB(db)
	return c
}

type classroomDo struct{ gen.DO }

type IClassroomDo interface {
	gen.SubQuery
	Debug() IClassroomDo
	WithContext(ctx context.Context) IClassroomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClassroomDo
	WriteDB() IClassroomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClassroomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClassroomDo
	Not(conds ...gen.Condition) IClassroomDo
	Or(conds ...gen.Condition) IClassroomDo
	Select(conds ...field.Expr) IClassroomDo
	Where(conds ...gen.Condition) IClassroomDo
	Order(conds ...field.Expr) IClassroomDo
	Distinct(cols ...field.Expr) IClassroomDo
	Omit(cols ...field.Expr) IClassroomDo
	Join(table schema.Tabler, on ...field.Expr) IClassroomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClassroomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClassroomDo
	Group(cols ...field.Expr) IClassroomDo
	Having(conds ...gen.Condition) IClassroomDo
	Limit(limit int) IClassroomDo
	Offset(offset int) IClassroomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClassroomDo
	Unscoped() IClassroomDo
	Create(values ...*model.Classroom) error
	CreateInBatches(values []*model.Classroom, batchSize int) error
	Save(values ...*model.Classroom) error
	First() (*model.Classroom, error)
	Take() (*model.Classroom, error)
	Last() (*model.Classroom, error)
	Find() ([]*model.Classroom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Classroom, err error)
	FindInBatches(result *[]*model.Classroom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Classroom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClassroomDo
	Assign(attrs ...field.AssignExpr) IClassroomDo
	Joins(fields ...field.RelationField) IClassroomDo
	Preload(fields ...field.RelationField) IClassroomDo
	FirstOrInit() (*model.Classroom, error)
	FirstOrCreate() (*model.Classroom, error)
	FindByPage(offset int, limit int) (result []*model.Classroom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClassroomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c classroomDo) Debug() IClassroomDo {
	return c.withDO(c.DO.Debug())
}

func (c classroomDo) WithContext(ctx context.Context) IClassroomDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c classroomDo) ReadDB() IClassroomDo {
	return c.Clauses(dbresolver.Read)
}

func (c classroomDo) WriteDB() IClassroomDo {
	return c.Clauses(dbresolver.Write)
}

func (c classroomDo) Session(config *gorm.Session) IClassroomDo {
	return c.withDO(c.DO.Session(config))
}

func (c classroomDo) Clauses(conds ...clause.Expression) IClassroomDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c classroomDo) Returning(value interface{}, columns ...string) IClassroomDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c classroomDo) Not(conds ...gen.Condition) IClassroomDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c classroomDo) Or(conds ...gen.Condition) IClassroomDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c classroomDo) Select(conds ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c classroomDo) Where(conds ...gen.Condition) IClassroomDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c classroomDo) Order(conds ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c classroomDo) Distinct(cols ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c classroomDo) Omit(cols ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c classroomDo) Join(table schema.Tabler, on ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c classroomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c classroomDo) RightJoin(table schema.Tabler, on ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c classroomDo) Group(cols ...field.Expr) IClassroomDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c classroomDo) Having(conds ...gen.Condition) IClassroomDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c classroomDo) Limit(limit int) IClassroomDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c classroomDo) Offset(offset int) IClassroomDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c classroomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClassroomDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c classroomDo) Unscoped() IClassroomDo {
	return c.withDO(c.DO.Unscoped())
}

func (c classroomDo) Create(values ...*model.Classroom) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c classroomDo) CreateInBatches(values []*model.Classroom, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c classroomDo) Save(values ...*model.Classroom) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c classroomDo) First() (*model.Classroom, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classroom), nil
	}
}

func (c classroomDo) Take() (*model.Classroom, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classroom), nil
	}
}

func (c classroomDo) Last() (*model.Classroom, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classroom), nil
	}
}

func (c classroomDo) Find() ([]*model.Classroom, error) {
	result, err := c.DO.Find()
	return result.([]*model.Classroom), err
}

func (c classroomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Classroom, err error) {
	buf := make([]*model.Classroom, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c classroomDo) FindInBatches(result *[]*model.Classroom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c classroomDo) Attrs(attrs ...field.AssignExpr) IClassroomDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c classroomDo) Assign(attrs ...field.AssignExpr) IClassroomDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c classroomDo) Joins(fields ...field.RelationField) IClassroomDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c classroomDo) Preload(fields ...field.RelationField) IClassroomDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c classroomDo) FirstOrInit() (*model.Classroom, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classroom), nil
	}
}

func (c classroomDo) FirstOrCreate() (*model.Classroom, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classroom), nil
	}
}

func (c classroomDo) FindByPage(offset int, limit int) (result []*model.Classroom, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c classroomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c classroomDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c classroomDo) Delete(models ...*model.Classroom) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *classroomDo) withDO(do gen.Dao) *classroomDo {
	c.DO = *do.(*gen.DO)
	return c
}
